{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/InputFieldBlock/InputFieldBlock.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","InputFieldBlock","labelFor","inputType","required","inputId","inputClass","inputName","inputValue","inputOnChange","htmlFor","type","id","name","value","onChange","NewMovie","state","imgUrlError","imdbUrlError","isValid","string","regexp","test","clear","setState","onAdd","event","preventDefault","target","elements","props","addMovie","onChangeHandler","stateKey","this","onSubmit","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ce4875c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const InputFieldBlock = ({\n  title,\n  labelFor,\n  inputType,\n  required,\n  inputId,\n  inputClass,\n  inputName,\n  inputValue,\n  inputOnChange,\n}) => (\n  <>\n    <label\n      htmlFor={labelFor}\n      className=\"movie-form__label\"\n    >\n      {title}\n      :&nbsp;\n      <br />\n      <input\n        type={inputType}\n        id={inputId}\n        name={inputName}\n        className={inputClass}\n        value={inputValue}\n        onChange={inputOnChange}\n        required={required}\n      />\n    </label>\n  </>\n);\n\nInputFieldBlock.propTypes = {\n  title: PropTypes.string.isRequired,\n  labelFor: PropTypes.string.isRequired,\n  inputType: PropTypes.string.isRequired,\n  inputId: PropTypes.string.isRequired,\n  inputClass: PropTypes.string.isRequired,\n  inputName: PropTypes.string.isRequired,\n  required: PropTypes.bool.isRequired,\n  inputValue: PropTypes.string.isRequired,\n  inputOnChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { InputFieldBlock } from '../InputFieldBlock';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imgUrlError: false,\n    imdbUrl: '',\n    imdbUrlError: false,\n    imdbId: '',\n  };\n\n  isValid = (string, regexp) => {\n    return regexp.test(string);\n  }\n\n  clear = () => {\n    this.setState({});\n  }\n\n  onAdd = (event) => {\n    event.preventDefault();\n    // eslint-disable-next-line\n    const regexp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const imgUrl = event.target.elements.imgUrl.value;\n    const imdbUrl = event.target.elements.imdbUrl.value;\n\n    if (!this.isValid(imgUrl, regexp)) {\n      this.setState({ imgUrlError: true });\n\n      return;\n    }\n\n    if (!this.isValid(imdbUrl, regexp)) {\n      this.setState({ imdbUrlError: true });\n\n      return;\n    }\n\n    const movie = {\n      title: event.target.elements.title.value,\n      description: event.target.elements.description.value,\n      imgUrl,\n      imdbUrl,\n      imdbId: event.target.elements.imdbId.value,\n    };\n\n    this.props.addMovie(movie);\n  }\n\n  onChangeHandler = (event, stateKey) => {\n    this.setState({\n      [stateKey]: event.target.value,\n      imgUrlError: false,\n      imdbUrlError: false,\n    });\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      imgUrlError,\n      imdbUrlError,\n    } = this.state;\n\n    return (\n      <form\n        className=\"movie-form\"\n        onSubmit={this.onAdd}\n      >\n        <fieldset>\n          <legend>\n            New movie\n          </legend>\n          <InputFieldBlock\n            title=\"Title\"\n            labelFor=\"movie-form__title-label\"\n            inputType=\"text\"\n            inputId=\"movie-form__title-label\"\n            inputClass=\"movie-form__input-field\"\n            inputName=\"title\"\n            required\n            inputValue={title}\n            inputOnChange={(event) => {\n              this.onChangeHandler(event, 'title');\n            }}\n          />\n          <br />\n\n          <label\n            htmlFor=\"movie-form__description-label\"\n            className=\"movie-form__description-label\"\n          >\n            Description:&nbsp;\n            <br />\n            <textarea\n              type=\"text\"\n              id=\"movie-form__description-label\"\n              name=\"description\"\n              className=\"movie-form__description-field\"\n              value={description}\n              onChange={(event) => {\n                this.onChangeHandler(event, 'description');\n              }}\n            />\n          </label>\n          <br />\n\n          <InputFieldBlock\n            title=\"Image url\"\n            labelFor=\"movie-form__imgurl-label\"\n            inputType=\"text\"\n            inputId=\"movie-form__imgurl-label\"\n            inputClass={`${imgUrlError && ' error'}\n              movie-form__input-field`}\n            required\n            inputName=\"imgUrl\"\n            inputValue={imgUrl}\n            inputOnChange={(event) => {\n              this.onChangeHandler(event, 'imgUrl');\n            }}\n          />\n          {imgUrlError\n            && (\n            <span\n              className=\"error-message\"\n            >\n              Please, enter a valid URL\n            </span>\n            )\n          }\n          <br />\n\n          <InputFieldBlock\n            title=\"Image db url\"\n            labelFor=\"movie-form__imgdburl-label\"\n            inputType=\"text\"\n            inputId=\"movie-form__imgdburl-label\"\n            inputClass={`${imdbUrlError && ' error'}\n                movie-form__input-field`}\n            required\n            inputName=\"imdbUrl\"\n            inputValue={imdbUrl}\n            inputOnChange={(event) => {\n              this.onChangeHandler(event, 'imdbUrl');\n            }}\n          />\n          {imdbUrlError\n            && (\n            <span\n              className=\"error-message\"\n            >\n              Please, enter a valid URL\n            </span>\n            )\n          }\n          <br />\n\n          <InputFieldBlock\n            title=\"Image db id\"\n            labelFor=\"movie-form__imgdbid-label\"\n            inputType=\"text\"\n            inputId=\"movie-form__imgdbid-label\"\n            inputClass=\"movie-form__input-field\"\n            required\n            inputName=\"imdbId\"\n            inputValue={imdbId}\n            inputOnChange={(event) => {\n              this.onChangeHandler(event, 'imdbId');\n            }}\n          />\n          <br />\n\n          <button\n            type=\"submit\"\n            disabled={imgUrlError || imdbUrlError}\n          >\n            Add\n          </button>\n        </fieldset>\n\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}